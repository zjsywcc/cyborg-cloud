/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ese.cloud.client.cloud.sms;

import java.util.*;

import javax.annotation.Generated;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({ "cast", "rawtypes", "serial", "unchecked" })
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-06-01")
public class MessageService {

    public interface Iface extends BaseService.Iface {

        public long sendMessage(Message message) throws ServiceError, InputError, org.apache.thrift.TException;

        public long createBreaker(int businessId, int jobId, int ruleId, int startTime,
                                  int endTime) throws ServiceError, org.apache.thrift.TException;

        public void destoryBreaker(long breaker) throws ServiceError, org.apache.thrift.TException;

    }

    public interface AsyncIface extends BaseService.AsyncIface {

        public void sendMessage(Message message,
                                org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

        public void createBreaker(int businessId, int jobId, int ruleId, int startTime, int endTime,
                                  org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

        public void destoryBreaker(long breaker,
                                   org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    }

    public static class Client extends BaseService.Client implements Iface {
        public Client(org.apache.thrift.protocol.TProtocol prot) {
            super(prot, prot);
        }

        public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
            super(iprot, oprot);
        }

        public long sendMessage(Message message) throws ServiceError, InputError, org.apache.thrift.TException {
            send_sendMessage(message);
            return recv_sendMessage();
        }

        public void send_sendMessage(Message message) throws org.apache.thrift.TException {
            sendMessage_args args = new sendMessage_args();
            args.setMessage(message);
            sendBase("sendMessage", args);
        }

        public long recv_sendMessage() throws ServiceError, InputError, org.apache.thrift.TException {
            sendMessage_result result = new sendMessage_result();
            receiveBase(result, "sendMessage");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.se != null) {
                throw result.se;
            }
            if (result.ie != null) {
                throw result.ie;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
                "sendMessage failed: unknown result");
        }

        public long createBreaker(int businessId, int jobId, int ruleId, int startTime,
                                  int endTime) throws ServiceError, org.apache.thrift.TException {
            send_createBreaker(businessId, jobId, ruleId, startTime, endTime);
            return recv_createBreaker();
        }

        public void send_createBreaker(int businessId, int jobId, int ruleId, int startTime,
                                       int endTime) throws org.apache.thrift.TException {
            createBreaker_args args = new createBreaker_args();
            args.setBusinessId(businessId);
            args.setJobId(jobId);
            args.setRuleId(ruleId);
            args.setStartTime(startTime);
            args.setEndTime(endTime);
            sendBase("createBreaker", args);
        }

        public long recv_createBreaker() throws ServiceError, org.apache.thrift.TException {
            createBreaker_result result = new createBreaker_result();
            receiveBase(result, "createBreaker");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.se != null) {
                throw result.se;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
                "createBreaker failed: unknown result");
        }

        public void destoryBreaker(long breaker) throws ServiceError, org.apache.thrift.TException {
            send_destoryBreaker(breaker);
            recv_destoryBreaker();
        }

        public void send_destoryBreaker(long breaker) throws org.apache.thrift.TException {
            destoryBreaker_args args = new destoryBreaker_args();
            args.setBreaker(breaker);
            sendBase("destoryBreaker", args);
        }

        public void recv_destoryBreaker() throws ServiceError, org.apache.thrift.TException {
            destoryBreaker_result result = new destoryBreaker_result();
            receiveBase(result, "destoryBreaker");
            if (result.se != null) {
                throw result.se;
            }
            return;
        }

        public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
            public Factory() {
            }

            public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
                return new Client(prot);
            }

            public Client getClient(org.apache.thrift.protocol.TProtocol iprot,
                                    org.apache.thrift.protocol.TProtocol oprot) {
                return new Client(iprot, oprot);
            }
        }

    }

    public static class AsyncClient extends BaseService.AsyncClient implements AsyncIface {
        public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory,
                           org.apache.thrift.async.TAsyncClientManager clientManager,
                           org.apache.thrift.transport.TNonblockingTransport transport) {
            super(protocolFactory, clientManager, transport);
        }

        public void sendMessage(Message message,
                                org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
            checkReady();
            sendMessage_call method_call = new sendMessage_call(message, resultHandler, this, ___protocolFactory,
                ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public void createBreaker(int businessId, int jobId, int ruleId, int startTime, int endTime,
                                  org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
            checkReady();
            createBreaker_call method_call = new createBreaker_call(businessId, jobId, ruleId, startTime, endTime,
                resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public void destoryBreaker(long breaker,
                                   org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
            checkReady();
            destoryBreaker_call method_call = new destoryBreaker_call(breaker, resultHandler, this, ___protocolFactory,
                ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
            private org.apache.thrift.async.TAsyncClientManager clientManager;
            private org.apache.thrift.protocol.TProtocolFactory protocolFactory;

            public Factory(org.apache.thrift.async.TAsyncClientManager clientManager,
                           org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
                this.clientManager = clientManager;
                this.protocolFactory = protocolFactory;
            }

            public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
                return new AsyncClient(protocolFactory, clientManager, transport);
            }
        }

        public static class sendMessage_call extends org.apache.thrift.async.TAsyncMethodCall {
            private Message message;

            public sendMessage_call(Message message, org.apache.thrift.async.AsyncMethodCallback resultHandler,
                                    org.apache.thrift.async.TAsyncClient client,
                                    org.apache.thrift.protocol.TProtocolFactory protocolFactory,
                                    org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.message = message;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("sendMessage",
                    org.apache.thrift.protocol.TMessageType.CALL, 0));
                sendMessage_args args = new sendMessage_args();
                args.setMessage(message);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public long getResult() throws ServiceError, InputError, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
                    getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_sendMessage();
            }
        }

        public static class createBreaker_call extends org.apache.thrift.async.TAsyncMethodCall {
            private int businessId;
            private int jobId;
            private int ruleId;
            private int startTime;
            private int endTime;

            public createBreaker_call(int businessId, int jobId, int ruleId, int startTime, int endTime,
                                      org.apache.thrift.async.AsyncMethodCallback resultHandler,
                                      org.apache.thrift.async.TAsyncClient client,
                                      org.apache.thrift.protocol.TProtocolFactory protocolFactory,
                                      org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.businessId = businessId;
                this.jobId = jobId;
                this.ruleId = ruleId;
                this.startTime = startTime;
                this.endTime = endTime;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createBreaker",
                    org.apache.thrift.protocol.TMessageType.CALL, 0));
                createBreaker_args args = new createBreaker_args();
                args.setBusinessId(businessId);
                args.setJobId(jobId);
                args.setRuleId(ruleId);
                args.setStartTime(startTime);
                args.setEndTime(endTime);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public long getResult() throws ServiceError, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
                    getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_createBreaker();
            }
        }

        public static class destoryBreaker_call extends org.apache.thrift.async.TAsyncMethodCall {
            private long breaker;

            public destoryBreaker_call(long breaker, org.apache.thrift.async.AsyncMethodCallback resultHandler,
                                       org.apache.thrift.async.TAsyncClient client,
                                       org.apache.thrift.protocol.TProtocolFactory protocolFactory,
                                       org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.breaker = breaker;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("destoryBreaker",
                    org.apache.thrift.protocol.TMessageType.CALL, 0));
                destoryBreaker_args args = new destoryBreaker_args();
                args.setBreaker(breaker);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public void getResult() throws ServiceError, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
                    getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                (new Client(prot)).recv_destoryBreaker();
            }
        }

    }

    public static class Processor<I extends Iface> extends BaseService.Processor<I>
                                 implements org.apache.thrift.TProcessor {
        private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());

        public Processor(I iface) {
            super(iface, getProcessMap(
                new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
        }

        protected Processor(I iface,
                            Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
            super(iface, getProcessMap(processMap));
        }

        private static <I extends Iface> Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
            processMap.put("sendMessage", new sendMessage());
            processMap.put("createBreaker", new createBreaker());
            processMap.put("destoryBreaker", new destoryBreaker());
            return processMap;
        }

        public static class sendMessage<I extends Iface>
                                       extends org.apache.thrift.ProcessFunction<I, sendMessage_args> {
            public sendMessage() {
                super("sendMessage");
            }

            public sendMessage_args getEmptyArgsInstance() {
                return new sendMessage_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public sendMessage_result getResult(I iface, sendMessage_args args) throws org.apache.thrift.TException {
                sendMessage_result result = new sendMessage_result();
                try {
                    result.success = iface.sendMessage(args.message);
                    result.setSuccessIsSet(true);
                } catch (ServiceError se) {
                    result.se = se;
                } catch (InputError ie) {
                    result.ie = ie;
                }
                return result;
            }
        }

        public static class createBreaker<I extends Iface>
                                         extends org.apache.thrift.ProcessFunction<I, createBreaker_args> {
            public createBreaker() {
                super("createBreaker");
            }

            public createBreaker_args getEmptyArgsInstance() {
                return new createBreaker_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public createBreaker_result getResult(I iface,
                                                  createBreaker_args args) throws org.apache.thrift.TException {
                createBreaker_result result = new createBreaker_result();
                try {
                    result.success = iface.createBreaker(args.businessId, args.jobId, args.ruleId, args.startTime,
                        args.endTime);
                    result.setSuccessIsSet(true);
                } catch (ServiceError se) {
                    result.se = se;
                }
                return result;
            }
        }

        public static class destoryBreaker<I extends Iface>
                                          extends org.apache.thrift.ProcessFunction<I, destoryBreaker_args> {
            public destoryBreaker() {
                super("destoryBreaker");
            }

            public destoryBreaker_args getEmptyArgsInstance() {
                return new destoryBreaker_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public destoryBreaker_result getResult(I iface,
                                                   destoryBreaker_args args) throws org.apache.thrift.TException {
                destoryBreaker_result result = new destoryBreaker_result();
                try {
                    iface.destoryBreaker(args.breaker);
                } catch (ServiceError se) {
                    result.se = se;
                }
                return result;
            }
        }

    }

    public static class AsyncProcessor<I extends AsyncIface> extends BaseService.AsyncProcessor<I> {
        private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());

        public AsyncProcessor(I iface) {
            super(iface, getProcessMap(
                new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
        }

        protected AsyncProcessor(I iface,
                                 Map<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> processMap) {
            super(iface, getProcessMap(processMap));
        }

        private static <I extends AsyncIface> Map<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> getProcessMap(Map<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> processMap) {
            processMap.put("sendMessage", new sendMessage());
            processMap.put("createBreaker", new createBreaker());
            processMap.put("destoryBreaker", new destoryBreaker());
            return processMap;
        }

        public static class sendMessage<I extends AsyncIface>
                                       extends org.apache.thrift.AsyncProcessFunction<I, sendMessage_args, Long> {
            public sendMessage() {
                super("sendMessage");
            }

            public sendMessage_args getEmptyArgsInstance() {
                return new sendMessage_args();
            }

            public AsyncMethodCallback<Long> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<Long>() {
                    public void onComplete(Long o) {
                        sendMessage_result result = new sendMessage_result();
                        result.success = o;
                        result.setSuccessIsSet(true);
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        } catch (Exception e) {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        sendMessage_result result = new sendMessage_result();
                        if (e instanceof ServiceError) {
                            result.se = (ServiceError) e;
                            result.setSeIsSet(true);
                            msg = result;
                        } else if (e instanceof InputError) {
                            result.ie = (InputError) e;
                            result.setIeIsSet(true);
                            msg = result;
                        } else {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(
                                org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        } catch (Exception ex) {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, sendMessage_args args,
                              org.apache.thrift.async.AsyncMethodCallback<Long> resultHandler) throws TException {
                iface.sendMessage(args.message, resultHandler);
            }
        }

        public static class createBreaker<I extends AsyncIface>
                                         extends org.apache.thrift.AsyncProcessFunction<I, createBreaker_args, Long> {
            public createBreaker() {
                super("createBreaker");
            }

            public createBreaker_args getEmptyArgsInstance() {
                return new createBreaker_args();
            }

            public AsyncMethodCallback<Long> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<Long>() {
                    public void onComplete(Long o) {
                        createBreaker_result result = new createBreaker_result();
                        result.success = o;
                        result.setSuccessIsSet(true);
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        } catch (Exception e) {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        createBreaker_result result = new createBreaker_result();
                        if (e instanceof ServiceError) {
                            result.se = (ServiceError) e;
                            result.setSeIsSet(true);
                            msg = result;
                        } else {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(
                                org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        } catch (Exception ex) {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, createBreaker_args args,
                              org.apache.thrift.async.AsyncMethodCallback<Long> resultHandler) throws TException {
                iface.createBreaker(args.businessId, args.jobId, args.ruleId, args.startTime, args.endTime,
                    resultHandler);
            }
        }

        public static class destoryBreaker<I extends AsyncIface>
                                          extends org.apache.thrift.AsyncProcessFunction<I, destoryBreaker_args, Void> {
            public destoryBreaker() {
                super("destoryBreaker");
            }

            public destoryBreaker_args getEmptyArgsInstance() {
                return new destoryBreaker_args();
            }

            public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<Void>() {
                    public void onComplete(Void o) {
                        destoryBreaker_result result = new destoryBreaker_result();
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        } catch (Exception e) {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        destoryBreaker_result result = new destoryBreaker_result();
                        if (e instanceof ServiceError) {
                            result.se = (ServiceError) e;
                            result.setSeIsSet(true);
                            msg = result;
                        } else {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(
                                org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        } catch (Exception ex) {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, destoryBreaker_args args,
                              org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
                iface.destoryBreaker(args.breaker, resultHandler);
            }
        }

    }

    public static class sendMessage_args implements org.apache.thrift.TBase<sendMessage_args, sendMessage_args._Fields>,
                                         java.io.Serializable, Cloneable, Comparable<sendMessage_args> {
        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        private static final org.apache.thrift.protocol.TStruct                     STRUCT_DESC        = new org.apache.thrift.protocol.TStruct(
            "sendMessage_args");
        private static final org.apache.thrift.protocol.TField                      MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField(
            "message", org.apache.thrift.protocol.TType.STRUCT, (short) 1);
        private static final Map<Class<? extends IScheme>, SchemeFactory>           schemes            = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new sendMessage_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new sendMessage_argsTupleSchemeFactory());
        }

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
                _Fields.class);
            tmpMap.put(_Fields.MESSAGE,
                new org.apache.thrift.meta_data.FieldMetaData("message",
                    org.apache.thrift.TFieldRequirementType.DEFAULT, new org.apache.thrift.meta_data.StructMetaData(
                        org.apache.thrift.protocol.TType.STRUCT, Message.class)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendMessage_args.class, metaDataMap);
        }

        public Message message; // required

        public sendMessage_args() {
        }

        public sendMessage_args(Message message) {
            this();
            this.message = message;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public sendMessage_args(sendMessage_args other) {
            if (other.isSetMessage()) {
                this.message = new Message(other.message);
            }
        }

        public sendMessage_args deepCopy() {
            return new sendMessage_args(this);
        }

        public void clear() {
            this.message = null;
        }

        public Message getMessage() {
            return this.message;
        }

        public sendMessage_args setMessage(Message message) {
            this.message = message;
            return this;
        }

        public void unsetMessage() {
            this.message = null;
        }

        /** Returns true if field message is set (has been assigned a value) and false otherwise */
        public boolean isSetMessage() {
            return this.message != null;
        }

        public void setMessageIsSet(boolean value) {
            if (!value) {
                this.message = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case MESSAGE:
                    if (value == null) {
                        unsetMessage();
                    } else {
                        setMessage((Message) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case MESSAGE:
                    return getMessage();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case MESSAGE:
                    return isSetMessage();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof sendMessage_args)
                return this.equals((sendMessage_args) that);
            return false;
        }

        public boolean equals(sendMessage_args that) {
            if (that == null)
                return false;

            boolean this_present_message = true && this.isSetMessage();
            boolean that_present_message = true && that.isSetMessage();
            if (this_present_message || that_present_message) {
                if (!(this_present_message && that_present_message))
                    return false;
                if (!this.message.equals(that.message))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_message = true && (isSetMessage());
            list.add(present_message);
            if (present_message)
                list.add(message);

            return list.hashCode();
        }

        public int compareTo(sendMessage_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetMessage()).compareTo(other.isSetMessage());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetMessage()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.message, other.message);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("sendMessage_args(");
            boolean first = true;

            sb.append("message:");
            if (this.message == null) {
                sb.append("null");
            } else {
                sb.append(this.message);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (message != null) {
                message.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
                                                                       MESSAGE((short) 1, "message");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            private final short  _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // MESSAGE
                        return MESSAGE;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        private static class sendMessage_argsStandardSchemeFactory implements SchemeFactory {
            public sendMessage_argsStandardScheme getScheme() {
                return new sendMessage_argsStandardScheme();
            }
        }

        private static class sendMessage_argsStandardScheme extends StandardScheme<sendMessage_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot,
                             sendMessage_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // MESSAGE
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.message = new Message();
                                struct.message.read(iprot);
                                struct.setMessageIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot,
                              sendMessage_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.message != null) {
                    oprot.writeFieldBegin(MESSAGE_FIELD_DESC);
                    struct.message.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class sendMessage_argsTupleSchemeFactory implements SchemeFactory {
            public sendMessage_argsTupleScheme getScheme() {
                return new sendMessage_argsTupleScheme();
            }
        }

        private static class sendMessage_argsTupleScheme extends TupleScheme<sendMessage_args> {

            public void write(org.apache.thrift.protocol.TProtocol prot,
                              sendMessage_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetMessage()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetMessage()) {
                    struct.message.write(oprot);
                }
            }

            public void read(org.apache.thrift.protocol.TProtocol prot,
                             sendMessage_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.message = new Message();
                    struct.message.read(iprot);
                    struct.setMessageIsSet(true);
                }
            }
        }

    }

    public static class sendMessage_result implements
                                           org.apache.thrift.TBase<sendMessage_result, sendMessage_result._Fields>,
                                           java.io.Serializable, Cloneable, Comparable<sendMessage_result> {
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        private static final org.apache.thrift.protocol.TStruct                     STRUCT_DESC        = new org.apache.thrift.protocol.TStruct(
            "sendMessage_result");
        private static final org.apache.thrift.protocol.TField                      SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
            "success", org.apache.thrift.protocol.TType.I64, (short) 0);
        private static final org.apache.thrift.protocol.TField                      SE_FIELD_DESC      = new org.apache.thrift.protocol.TField(
            "se", org.apache.thrift.protocol.TType.STRUCT, (short) 1);
        private static final org.apache.thrift.protocol.TField                      IE_FIELD_DESC      = new org.apache.thrift.protocol.TField(
            "ie", org.apache.thrift.protocol.TType.STRUCT, (short) 2);
        private static final Map<Class<? extends IScheme>, SchemeFactory>           schemes            = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        // isset id assignments
        private static final int                                                    __SUCCESS_ISSET_ID = 0;

        static {
            schemes.put(StandardScheme.class, new sendMessage_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new sendMessage_resultTupleSchemeFactory());
        }

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
                _Fields.class);
            tmpMap.put(_Fields.SUCCESS,
                new org.apache.thrift.meta_data.FieldMetaData("success",
                    org.apache.thrift.TFieldRequirementType.DEFAULT, new org.apache.thrift.meta_data.FieldValueMetaData(
                        org.apache.thrift.protocol.TType.I64, "SerialNumber")));
            tmpMap.put(_Fields.SE,
                new org.apache.thrift.meta_data.FieldMetaData("se", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
            tmpMap.put(_Fields.IE,
                new org.apache.thrift.meta_data.FieldMetaData("ie", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendMessage_result.class, metaDataMap);
        }

        public long         success;             // required
        public ServiceError se;                  // required
        public InputError   ie;                  // required
        private byte        __isset_bitfield = 0;

        public sendMessage_result() {
        }

        public sendMessage_result(long success, ServiceError se, InputError ie) {
            this();
            this.success = success;
            setSuccessIsSet(true);
            this.se = se;
            this.ie = ie;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public sendMessage_result(sendMessage_result other) {
            __isset_bitfield = other.__isset_bitfield;
            this.success = other.success;
            if (other.isSetSe()) {
                this.se = new ServiceError(other.se);
            }
            if (other.isSetIe()) {
                this.ie = new InputError(other.ie);
            }
        }

        public sendMessage_result deepCopy() {
            return new sendMessage_result(this);
        }

        public void clear() {
            setSuccessIsSet(false);
            this.success = 0;
            this.se = null;
            this.ie = null;
        }

        public long getSuccess() {
            return this.success;
        }

        public sendMessage_result setSuccess(long success) {
            this.success = success;
            setSuccessIsSet(true);
            return this;
        }

        public void unsetSuccess() {
            __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
        }

        public void setSuccessIsSet(boolean value) {
            __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
        }

        public ServiceError getSe() {
            return this.se;
        }

        public sendMessage_result setSe(ServiceError se) {
            this.se = se;
            return this;
        }

        public void unsetSe() {
            this.se = null;
        }

        /** Returns true if field se is set (has been assigned a value) and false otherwise */
        public boolean isSetSe() {
            return this.se != null;
        }

        public void setSeIsSet(boolean value) {
            if (!value) {
                this.se = null;
            }
        }

        public InputError getIe() {
            return this.ie;
        }

        public sendMessage_result setIe(InputError ie) {
            this.ie = ie;
            return this;
        }

        public void unsetIe() {
            this.ie = null;
        }

        /** Returns true if field ie is set (has been assigned a value) and false otherwise */
        public boolean isSetIe() {
            return this.ie != null;
        }

        public void setIeIsSet(boolean value) {
            if (!value) {
                this.ie = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((Long) value);
                    }
                    break;

                case SE:
                    if (value == null) {
                        unsetSe();
                    } else {
                        setSe((ServiceError) value);
                    }
                    break;

                case IE:
                    if (value == null) {
                        unsetIe();
                    } else {
                        setIe((InputError) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

                case SE:
                    return getSe();

                case IE:
                    return getIe();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                case SE:
                    return isSetSe();
                case IE:
                    return isSetIe();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof sendMessage_result)
                return this.equals((sendMessage_result) that);
            return false;
        }

        public boolean equals(sendMessage_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true;
            boolean that_present_success = true;
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (this.success != that.success)
                    return false;
            }

            boolean this_present_se = true && this.isSetSe();
            boolean that_present_se = true && that.isSetSe();
            if (this_present_se || that_present_se) {
                if (!(this_present_se && that_present_se))
                    return false;
                if (!this.se.equals(that.se))
                    return false;
            }

            boolean this_present_ie = true && this.isSetIe();
            boolean that_present_ie = true && that.isSetIe();
            if (this_present_ie || that_present_ie) {
                if (!(this_present_ie && that_present_ie))
                    return false;
                if (!this.ie.equals(that.ie))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_success = true;
            list.add(present_success);
            if (present_success)
                list.add(success);

            boolean present_se = true && (isSetSe());
            list.add(present_se);
            if (present_se)
                list.add(se);

            boolean present_ie = true && (isSetIe());
            list.add(present_ie);
            if (present_ie)
                list.add(ie);

            return list.hashCode();
        }

        public int compareTo(sendMessage_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetSe()).compareTo(other.isSetSe());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSe()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.se, other.se);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetIe()).compareTo(other.isSetIe());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetIe()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ie, other.ie);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("sendMessage_result(");
            boolean first = true;

            sb.append("success:");
            sb.append(this.success);
            first = false;
            if (!first)
                sb.append(", ");
            sb.append("se:");
            if (this.se == null) {
                sb.append("null");
            } else {
                sb.append(this.se);
            }
            first = false;
            if (!first)
                sb.append(", ");
            sb.append("ie:");
            if (this.ie == null) {
                sb.append("null");
            } else {
                sb.append(this.ie);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
                                                                       SUCCESS((short) 0,
                                                                               "success"), SE((short) 1,
                                                                                              "se"), IE((short) 2,
                                                                                                        "ie");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            private final short  _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // SE
                        return SE;
                    case 2: // IE
                        return IE;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        private static class sendMessage_resultStandardSchemeFactory implements SchemeFactory {
            public sendMessage_resultStandardScheme getScheme() {
                return new sendMessage_resultStandardScheme();
            }
        }

        private static class sendMessage_resultStandardScheme extends StandardScheme<sendMessage_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot,
                             sendMessage_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                                struct.success = iprot.readI64();
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // SE
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.se = new ServiceError();
                                struct.se.read(iprot);
                                struct.setSeIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // IE
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.ie = new InputError();
                                struct.ie.read(iprot);
                                struct.setIeIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot,
                              sendMessage_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.isSetSuccess()) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    oprot.writeI64(struct.success);
                    oprot.writeFieldEnd();
                }
                if (struct.se != null) {
                    oprot.writeFieldBegin(SE_FIELD_DESC);
                    struct.se.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.ie != null) {
                    oprot.writeFieldBegin(IE_FIELD_DESC);
                    struct.ie.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class sendMessage_resultTupleSchemeFactory implements SchemeFactory {
            public sendMessage_resultTupleScheme getScheme() {
                return new sendMessage_resultTupleScheme();
            }
        }

        private static class sendMessage_resultTupleScheme extends TupleScheme<sendMessage_result> {

            public void write(org.apache.thrift.protocol.TProtocol prot,
                              sendMessage_result struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetSe()) {
                    optionals.set(1);
                }
                if (struct.isSetIe()) {
                    optionals.set(2);
                }
                oprot.writeBitSet(optionals, 3);
                if (struct.isSetSuccess()) {
                    oprot.writeI64(struct.success);
                }
                if (struct.isSetSe()) {
                    struct.se.write(oprot);
                }
                if (struct.isSetIe()) {
                    struct.ie.write(oprot);
                }
            }

            public void read(org.apache.thrift.protocol.TProtocol prot,
                             sendMessage_result struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(3);
                if (incoming.get(0)) {
                    struct.success = iprot.readI64();
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.se = new ServiceError();
                    struct.se.read(iprot);
                    struct.setSeIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.ie = new InputError();
                    struct.ie.read(iprot);
                    struct.setIeIsSet(true);
                }
            }
        }

    }

    public static class createBreaker_args implements
                                           org.apache.thrift.TBase<createBreaker_args, createBreaker_args._Fields>,
                                           java.io.Serializable, Cloneable, Comparable<createBreaker_args> {
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        private static final org.apache.thrift.protocol.TStruct                     STRUCT_DESC            = new org.apache.thrift.protocol.TStruct(
            "createBreaker_args");
        private static final org.apache.thrift.protocol.TField                      BUSINESS_ID_FIELD_DESC = new org.apache.thrift.protocol.TField(
            "businessId", org.apache.thrift.protocol.TType.I32, (short) 1);
        private static final org.apache.thrift.protocol.TField                      JOB_ID_FIELD_DESC      = new org.apache.thrift.protocol.TField(
            "jobId", org.apache.thrift.protocol.TType.I32, (short) 2);
        private static final org.apache.thrift.protocol.TField                      RULE_ID_FIELD_DESC     = new org.apache.thrift.protocol.TField(
            "ruleId", org.apache.thrift.protocol.TType.I32, (short) 3);
        private static final org.apache.thrift.protocol.TField                      START_TIME_FIELD_DESC  = new org.apache.thrift.protocol.TField(
            "startTime", org.apache.thrift.protocol.TType.I32, (short) 4);
        private static final org.apache.thrift.protocol.TField                      END_TIME_FIELD_DESC    = new org.apache.thrift.protocol.TField(
            "endTime", org.apache.thrift.protocol.TType.I32, (short) 5);
        private static final Map<Class<? extends IScheme>, SchemeFactory>           schemes                = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        // isset id assignments
        private static final int                                                    __BUSINESSID_ISSET_ID  = 0;
        private static final int                                                    __JOBID_ISSET_ID       = 1;
        private static final int                                                    __RULEID_ISSET_ID      = 2;
        private static final int                                                    __STARTTIME_ISSET_ID   = 3;
        private static final int                                                    __ENDTIME_ISSET_ID     = 4;

        static {
            schemes.put(StandardScheme.class, new createBreaker_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new createBreaker_argsTupleSchemeFactory());
        }

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
                _Fields.class);
            tmpMap.put(_Fields.BUSINESS_ID,
                new org.apache.thrift.meta_data.FieldMetaData("businessId",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.JOB_ID,
                new org.apache.thrift.meta_data.FieldMetaData("jobId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.RULE_ID,
                new org.apache.thrift.meta_data.FieldMetaData("ruleId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.START_TIME,
                new org.apache.thrift.meta_data.FieldMetaData("startTime",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.END_TIME,
                new org.apache.thrift.meta_data.FieldMetaData("endTime",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createBreaker_args.class, metaDataMap);
        }

        public int   businessId;          // required
        public int   jobId;               // required
        public int   ruleId;              // required
        public int   startTime;           // required
        public int   endTime;             // required
        private byte __isset_bitfield = 0;

        public createBreaker_args() {
        }

        public createBreaker_args(int businessId, int jobId, int ruleId, int startTime, int endTime) {
            this();
            this.businessId = businessId;
            setBusinessIdIsSet(true);
            this.jobId = jobId;
            setJobIdIsSet(true);
            this.ruleId = ruleId;
            setRuleIdIsSet(true);
            this.startTime = startTime;
            setStartTimeIsSet(true);
            this.endTime = endTime;
            setEndTimeIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public createBreaker_args(createBreaker_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.businessId = other.businessId;
            this.jobId = other.jobId;
            this.ruleId = other.ruleId;
            this.startTime = other.startTime;
            this.endTime = other.endTime;
        }

        public createBreaker_args deepCopy() {
            return new createBreaker_args(this);
        }

        public void clear() {
            setBusinessIdIsSet(false);
            this.businessId = 0;
            setJobIdIsSet(false);
            this.jobId = 0;
            setRuleIdIsSet(false);
            this.ruleId = 0;
            setStartTimeIsSet(false);
            this.startTime = 0;
            setEndTimeIsSet(false);
            this.endTime = 0;
        }

        public int getBusinessId() {
            return this.businessId;
        }

        public createBreaker_args setBusinessId(int businessId) {
            this.businessId = businessId;
            setBusinessIdIsSet(true);
            return this;
        }

        public void unsetBusinessId() {
            __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BUSINESSID_ISSET_ID);
        }

        /** Returns true if field businessId is set (has been assigned a value) and false otherwise */
        public boolean isSetBusinessId() {
            return EncodingUtils.testBit(__isset_bitfield, __BUSINESSID_ISSET_ID);
        }

        public void setBusinessIdIsSet(boolean value) {
            __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BUSINESSID_ISSET_ID, value);
        }

        public int getJobId() {
            return this.jobId;
        }

        public createBreaker_args setJobId(int jobId) {
            this.jobId = jobId;
            setJobIdIsSet(true);
            return this;
        }

        public void unsetJobId() {
            __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __JOBID_ISSET_ID);
        }

        /** Returns true if field jobId is set (has been assigned a value) and false otherwise */
        public boolean isSetJobId() {
            return EncodingUtils.testBit(__isset_bitfield, __JOBID_ISSET_ID);
        }

        public void setJobIdIsSet(boolean value) {
            __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __JOBID_ISSET_ID, value);
        }

        public int getRuleId() {
            return this.ruleId;
        }

        public createBreaker_args setRuleId(int ruleId) {
            this.ruleId = ruleId;
            setRuleIdIsSet(true);
            return this;
        }

        public void unsetRuleId() {
            __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RULEID_ISSET_ID);
        }

        /** Returns true if field ruleId is set (has been assigned a value) and false otherwise */
        public boolean isSetRuleId() {
            return EncodingUtils.testBit(__isset_bitfield, __RULEID_ISSET_ID);
        }

        public void setRuleIdIsSet(boolean value) {
            __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RULEID_ISSET_ID, value);
        }

        public int getStartTime() {
            return this.startTime;
        }

        public createBreaker_args setStartTime(int startTime) {
            this.startTime = startTime;
            setStartTimeIsSet(true);
            return this;
        }

        public void unsetStartTime() {
            __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STARTTIME_ISSET_ID);
        }

        /** Returns true if field startTime is set (has been assigned a value) and false otherwise */
        public boolean isSetStartTime() {
            return EncodingUtils.testBit(__isset_bitfield, __STARTTIME_ISSET_ID);
        }

        public void setStartTimeIsSet(boolean value) {
            __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STARTTIME_ISSET_ID, value);
        }

        public int getEndTime() {
            return this.endTime;
        }

        public createBreaker_args setEndTime(int endTime) {
            this.endTime = endTime;
            setEndTimeIsSet(true);
            return this;
        }

        public void unsetEndTime() {
            __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENDTIME_ISSET_ID);
        }

        /** Returns true if field endTime is set (has been assigned a value) and false otherwise */
        public boolean isSetEndTime() {
            return EncodingUtils.testBit(__isset_bitfield, __ENDTIME_ISSET_ID);
        }

        public void setEndTimeIsSet(boolean value) {
            __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENDTIME_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case BUSINESS_ID:
                    if (value == null) {
                        unsetBusinessId();
                    } else {
                        setBusinessId((Integer) value);
                    }
                    break;

                case JOB_ID:
                    if (value == null) {
                        unsetJobId();
                    } else {
                        setJobId((Integer) value);
                    }
                    break;

                case RULE_ID:
                    if (value == null) {
                        unsetRuleId();
                    } else {
                        setRuleId((Integer) value);
                    }
                    break;

                case START_TIME:
                    if (value == null) {
                        unsetStartTime();
                    } else {
                        setStartTime((Integer) value);
                    }
                    break;

                case END_TIME:
                    if (value == null) {
                        unsetEndTime();
                    } else {
                        setEndTime((Integer) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case BUSINESS_ID:
                    return getBusinessId();

                case JOB_ID:
                    return getJobId();

                case RULE_ID:
                    return getRuleId();

                case START_TIME:
                    return getStartTime();

                case END_TIME:
                    return getEndTime();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case BUSINESS_ID:
                    return isSetBusinessId();
                case JOB_ID:
                    return isSetJobId();
                case RULE_ID:
                    return isSetRuleId();
                case START_TIME:
                    return isSetStartTime();
                case END_TIME:
                    return isSetEndTime();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof createBreaker_args)
                return this.equals((createBreaker_args) that);
            return false;
        }

        public boolean equals(createBreaker_args that) {
            if (that == null)
                return false;

            boolean this_present_businessId = true;
            boolean that_present_businessId = true;
            if (this_present_businessId || that_present_businessId) {
                if (!(this_present_businessId && that_present_businessId))
                    return false;
                if (this.businessId != that.businessId)
                    return false;
            }

            boolean this_present_jobId = true;
            boolean that_present_jobId = true;
            if (this_present_jobId || that_present_jobId) {
                if (!(this_present_jobId && that_present_jobId))
                    return false;
                if (this.jobId != that.jobId)
                    return false;
            }

            boolean this_present_ruleId = true;
            boolean that_present_ruleId = true;
            if (this_present_ruleId || that_present_ruleId) {
                if (!(this_present_ruleId && that_present_ruleId))
                    return false;
                if (this.ruleId != that.ruleId)
                    return false;
            }

            boolean this_present_startTime = true;
            boolean that_present_startTime = true;
            if (this_present_startTime || that_present_startTime) {
                if (!(this_present_startTime && that_present_startTime))
                    return false;
                if (this.startTime != that.startTime)
                    return false;
            }

            boolean this_present_endTime = true;
            boolean that_present_endTime = true;
            if (this_present_endTime || that_present_endTime) {
                if (!(this_present_endTime && that_present_endTime))
                    return false;
                if (this.endTime != that.endTime)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_businessId = true;
            list.add(present_businessId);
            if (present_businessId)
                list.add(businessId);

            boolean present_jobId = true;
            list.add(present_jobId);
            if (present_jobId)
                list.add(jobId);

            boolean present_ruleId = true;
            list.add(present_ruleId);
            if (present_ruleId)
                list.add(ruleId);

            boolean present_startTime = true;
            list.add(present_startTime);
            if (present_startTime)
                list.add(startTime);

            boolean present_endTime = true;
            list.add(present_endTime);
            if (present_endTime)
                list.add(endTime);

            return list.hashCode();
        }

        public int compareTo(createBreaker_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetBusinessId()).compareTo(other.isSetBusinessId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetBusinessId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessId, other.businessId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetJobId()).compareTo(other.isSetJobId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetJobId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobId, other.jobId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetRuleId()).compareTo(other.isSetRuleId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetRuleId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ruleId, other.ruleId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetStartTime()).compareTo(other.isSetStartTime());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetStartTime()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startTime, other.startTime);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetEndTime()).compareTo(other.isSetEndTime());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetEndTime()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endTime, other.endTime);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("createBreaker_args(");
            boolean first = true;

            sb.append("businessId:");
            sb.append(this.businessId);
            first = false;
            if (!first)
                sb.append(", ");
            sb.append("jobId:");
            sb.append(this.jobId);
            first = false;
            if (!first)
                sb.append(", ");
            sb.append("ruleId:");
            sb.append(this.ruleId);
            first = false;
            if (!first)
                sb.append(", ");
            sb.append("startTime:");
            sb.append(this.startTime);
            first = false;
            if (!first)
                sb.append(", ");
            sb.append("endTime:");
            sb.append(this.endTime);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
                                                                       BUSINESS_ID((short) 1,
                                                                                   "businessId"), JOB_ID((short) 2,
                                                                                                         "jobId"), RULE_ID((short) 3,
                                                                                                                           "ruleId"), START_TIME((short) 4,
                                                                                                                                                 "startTime"), END_TIME((short) 5,
                                                                                                                                                                        "endTime");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            private final short  _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // BUSINESS_ID
                        return BUSINESS_ID;
                    case 2: // JOB_ID
                        return JOB_ID;
                    case 3: // RULE_ID
                        return RULE_ID;
                    case 4: // START_TIME
                        return START_TIME;
                    case 5: // END_TIME
                        return END_TIME;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        private static class createBreaker_argsStandardSchemeFactory implements SchemeFactory {
            public createBreaker_argsStandardScheme getScheme() {
                return new createBreaker_argsStandardScheme();
            }
        }

        private static class createBreaker_argsStandardScheme extends StandardScheme<createBreaker_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot,
                             createBreaker_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // BUSINESS_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.businessId = iprot.readI32();
                                struct.setBusinessIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // JOB_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.jobId = iprot.readI32();
                                struct.setJobIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // RULE_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.ruleId = iprot.readI32();
                                struct.setRuleIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 4: // START_TIME
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.startTime = iprot.readI32();
                                struct.setStartTimeIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 5: // END_TIME
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.endTime = iprot.readI32();
                                struct.setEndTimeIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot,
                              createBreaker_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(BUSINESS_ID_FIELD_DESC);
                oprot.writeI32(struct.businessId);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(JOB_ID_FIELD_DESC);
                oprot.writeI32(struct.jobId);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(RULE_ID_FIELD_DESC);
                oprot.writeI32(struct.ruleId);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(START_TIME_FIELD_DESC);
                oprot.writeI32(struct.startTime);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(END_TIME_FIELD_DESC);
                oprot.writeI32(struct.endTime);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class createBreaker_argsTupleSchemeFactory implements SchemeFactory {
            public createBreaker_argsTupleScheme getScheme() {
                return new createBreaker_argsTupleScheme();
            }
        }

        private static class createBreaker_argsTupleScheme extends TupleScheme<createBreaker_args> {

            public void write(org.apache.thrift.protocol.TProtocol prot,
                              createBreaker_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetBusinessId()) {
                    optionals.set(0);
                }
                if (struct.isSetJobId()) {
                    optionals.set(1);
                }
                if (struct.isSetRuleId()) {
                    optionals.set(2);
                }
                if (struct.isSetStartTime()) {
                    optionals.set(3);
                }
                if (struct.isSetEndTime()) {
                    optionals.set(4);
                }
                oprot.writeBitSet(optionals, 5);
                if (struct.isSetBusinessId()) {
                    oprot.writeI32(struct.businessId);
                }
                if (struct.isSetJobId()) {
                    oprot.writeI32(struct.jobId);
                }
                if (struct.isSetRuleId()) {
                    oprot.writeI32(struct.ruleId);
                }
                if (struct.isSetStartTime()) {
                    oprot.writeI32(struct.startTime);
                }
                if (struct.isSetEndTime()) {
                    oprot.writeI32(struct.endTime);
                }
            }

            public void read(org.apache.thrift.protocol.TProtocol prot,
                             createBreaker_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(5);
                if (incoming.get(0)) {
                    struct.businessId = iprot.readI32();
                    struct.setBusinessIdIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.jobId = iprot.readI32();
                    struct.setJobIdIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.ruleId = iprot.readI32();
                    struct.setRuleIdIsSet(true);
                }
                if (incoming.get(3)) {
                    struct.startTime = iprot.readI32();
                    struct.setStartTimeIsSet(true);
                }
                if (incoming.get(4)) {
                    struct.endTime = iprot.readI32();
                    struct.setEndTimeIsSet(true);
                }
            }
        }

    }

    public static class createBreaker_result implements
                                             org.apache.thrift.TBase<createBreaker_result, createBreaker_result._Fields>,
                                             java.io.Serializable, Cloneable, Comparable<createBreaker_result> {
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        private static final org.apache.thrift.protocol.TStruct                     STRUCT_DESC        = new org.apache.thrift.protocol.TStruct(
            "createBreaker_result");
        private static final org.apache.thrift.protocol.TField                      SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
            "success", org.apache.thrift.protocol.TType.I64, (short) 0);
        private static final org.apache.thrift.protocol.TField                      SE_FIELD_DESC      = new org.apache.thrift.protocol.TField(
            "se", org.apache.thrift.protocol.TType.STRUCT, (short) 1);
        private static final Map<Class<? extends IScheme>, SchemeFactory>           schemes            = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        // isset id assignments
        private static final int                                                    __SUCCESS_ISSET_ID = 0;

        static {
            schemes.put(StandardScheme.class, new createBreaker_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new createBreaker_resultTupleSchemeFactory());
        }

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
                _Fields.class);
            tmpMap.put(_Fields.SUCCESS,
                new org.apache.thrift.meta_data.FieldMetaData("success",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
            tmpMap.put(_Fields.SE,
                new org.apache.thrift.meta_data.FieldMetaData("se", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createBreaker_result.class, metaDataMap);
        }

        public long         success;             // required
        public ServiceError se;                  // required
        private byte        __isset_bitfield = 0;

        public createBreaker_result() {
        }

        public createBreaker_result(long success, ServiceError se) {
            this();
            this.success = success;
            setSuccessIsSet(true);
            this.se = se;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public createBreaker_result(createBreaker_result other) {
            __isset_bitfield = other.__isset_bitfield;
            this.success = other.success;
            if (other.isSetSe()) {
                this.se = new ServiceError(other.se);
            }
        }

        public createBreaker_result deepCopy() {
            return new createBreaker_result(this);
        }

        public void clear() {
            setSuccessIsSet(false);
            this.success = 0;
            this.se = null;
        }

        public long getSuccess() {
            return this.success;
        }

        public createBreaker_result setSuccess(long success) {
            this.success = success;
            setSuccessIsSet(true);
            return this;
        }

        public void unsetSuccess() {
            __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
        }

        public void setSuccessIsSet(boolean value) {
            __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
        }

        public ServiceError getSe() {
            return this.se;
        }

        public createBreaker_result setSe(ServiceError se) {
            this.se = se;
            return this;
        }

        public void unsetSe() {
            this.se = null;
        }

        /** Returns true if field se is set (has been assigned a value) and false otherwise */
        public boolean isSetSe() {
            return this.se != null;
        }

        public void setSeIsSet(boolean value) {
            if (!value) {
                this.se = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((Long) value);
                    }
                    break;

                case SE:
                    if (value == null) {
                        unsetSe();
                    } else {
                        setSe((ServiceError) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

                case SE:
                    return getSe();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                case SE:
                    return isSetSe();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof createBreaker_result)
                return this.equals((createBreaker_result) that);
            return false;
        }

        public boolean equals(createBreaker_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true;
            boolean that_present_success = true;
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (this.success != that.success)
                    return false;
            }

            boolean this_present_se = true && this.isSetSe();
            boolean that_present_se = true && that.isSetSe();
            if (this_present_se || that_present_se) {
                if (!(this_present_se && that_present_se))
                    return false;
                if (!this.se.equals(that.se))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_success = true;
            list.add(present_success);
            if (present_success)
                list.add(success);

            boolean present_se = true && (isSetSe());
            list.add(present_se);
            if (present_se)
                list.add(se);

            return list.hashCode();
        }

        public int compareTo(createBreaker_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetSe()).compareTo(other.isSetSe());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSe()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.se, other.se);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("createBreaker_result(");
            boolean first = true;

            sb.append("success:");
            sb.append(this.success);
            first = false;
            if (!first)
                sb.append(", ");
            sb.append("se:");
            if (this.se == null) {
                sb.append("null");
            } else {
                sb.append(this.se);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
                                                                       SUCCESS((short) 0, "success"), SE((short) 1,
                                                                                                         "se");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            private final short  _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // SE
                        return SE;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        private static class createBreaker_resultStandardSchemeFactory implements SchemeFactory {
            public createBreaker_resultStandardScheme getScheme() {
                return new createBreaker_resultStandardScheme();
            }
        }

        private static class createBreaker_resultStandardScheme extends StandardScheme<createBreaker_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot,
                             createBreaker_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                                struct.success = iprot.readI64();
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // SE
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.se = new ServiceError();
                                struct.se.read(iprot);
                                struct.setSeIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot,
                              createBreaker_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.isSetSuccess()) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    oprot.writeI64(struct.success);
                    oprot.writeFieldEnd();
                }
                if (struct.se != null) {
                    oprot.writeFieldBegin(SE_FIELD_DESC);
                    struct.se.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class createBreaker_resultTupleSchemeFactory implements SchemeFactory {
            public createBreaker_resultTupleScheme getScheme() {
                return new createBreaker_resultTupleScheme();
            }
        }

        private static class createBreaker_resultTupleScheme extends TupleScheme<createBreaker_result> {

            public void write(org.apache.thrift.protocol.TProtocol prot,
                              createBreaker_result struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetSe()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    oprot.writeI64(struct.success);
                }
                if (struct.isSetSe()) {
                    struct.se.write(oprot);
                }
            }

            public void read(org.apache.thrift.protocol.TProtocol prot,
                             createBreaker_result struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = iprot.readI64();
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.se = new ServiceError();
                    struct.se.read(iprot);
                    struct.setSeIsSet(true);
                }
            }
        }

    }

    public static class destoryBreaker_args implements
                                            org.apache.thrift.TBase<destoryBreaker_args, destoryBreaker_args._Fields>,
                                            java.io.Serializable, Cloneable, Comparable<destoryBreaker_args> {
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        private static final org.apache.thrift.protocol.TStruct                     STRUCT_DESC        = new org.apache.thrift.protocol.TStruct(
            "destoryBreaker_args");
        private static final org.apache.thrift.protocol.TField                      BREAKER_FIELD_DESC = new org.apache.thrift.protocol.TField(
            "breaker", org.apache.thrift.protocol.TType.I64, (short) 1);
        private static final Map<Class<? extends IScheme>, SchemeFactory>           schemes            = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        // isset id assignments
        private static final int                                                    __BREAKER_ISSET_ID = 0;

        static {
            schemes.put(StandardScheme.class, new destoryBreaker_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new destoryBreaker_argsTupleSchemeFactory());
        }

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
                _Fields.class);
            tmpMap.put(_Fields.BREAKER,
                new org.apache.thrift.meta_data.FieldMetaData("breaker",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(destoryBreaker_args.class, metaDataMap);
        }

        public long  breaker;             // required
        private byte __isset_bitfield = 0;

        public destoryBreaker_args() {
        }

        public destoryBreaker_args(long breaker) {
            this();
            this.breaker = breaker;
            setBreakerIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public destoryBreaker_args(destoryBreaker_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.breaker = other.breaker;
        }

        public destoryBreaker_args deepCopy() {
            return new destoryBreaker_args(this);
        }

        public void clear() {
            setBreakerIsSet(false);
            this.breaker = 0;
        }

        public long getBreaker() {
            return this.breaker;
        }

        public destoryBreaker_args setBreaker(long breaker) {
            this.breaker = breaker;
            setBreakerIsSet(true);
            return this;
        }

        public void unsetBreaker() {
            __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BREAKER_ISSET_ID);
        }

        /** Returns true if field breaker is set (has been assigned a value) and false otherwise */
        public boolean isSetBreaker() {
            return EncodingUtils.testBit(__isset_bitfield, __BREAKER_ISSET_ID);
        }

        public void setBreakerIsSet(boolean value) {
            __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BREAKER_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case BREAKER:
                    if (value == null) {
                        unsetBreaker();
                    } else {
                        setBreaker((Long) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case BREAKER:
                    return getBreaker();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case BREAKER:
                    return isSetBreaker();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof destoryBreaker_args)
                return this.equals((destoryBreaker_args) that);
            return false;
        }

        public boolean equals(destoryBreaker_args that) {
            if (that == null)
                return false;

            boolean this_present_breaker = true;
            boolean that_present_breaker = true;
            if (this_present_breaker || that_present_breaker) {
                if (!(this_present_breaker && that_present_breaker))
                    return false;
                if (this.breaker != that.breaker)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_breaker = true;
            list.add(present_breaker);
            if (present_breaker)
                list.add(breaker);

            return list.hashCode();
        }

        public int compareTo(destoryBreaker_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetBreaker()).compareTo(other.isSetBreaker());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetBreaker()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.breaker, other.breaker);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("destoryBreaker_args(");
            boolean first = true;

            sb.append("breaker:");
            sb.append(this.breaker);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
                                                                       BREAKER((short) 1, "breaker");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            private final short  _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // BREAKER
                        return BREAKER;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        private static class destoryBreaker_argsStandardSchemeFactory implements SchemeFactory {
            public destoryBreaker_argsStandardScheme getScheme() {
                return new destoryBreaker_argsStandardScheme();
            }
        }

        private static class destoryBreaker_argsStandardScheme extends StandardScheme<destoryBreaker_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot,
                             destoryBreaker_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // BREAKER
                            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                                struct.breaker = iprot.readI64();
                                struct.setBreakerIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot,
                              destoryBreaker_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(BREAKER_FIELD_DESC);
                oprot.writeI64(struct.breaker);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class destoryBreaker_argsTupleSchemeFactory implements SchemeFactory {
            public destoryBreaker_argsTupleScheme getScheme() {
                return new destoryBreaker_argsTupleScheme();
            }
        }

        private static class destoryBreaker_argsTupleScheme extends TupleScheme<destoryBreaker_args> {

            public void write(org.apache.thrift.protocol.TProtocol prot,
                              destoryBreaker_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetBreaker()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetBreaker()) {
                    oprot.writeI64(struct.breaker);
                }
            }

            public void read(org.apache.thrift.protocol.TProtocol prot,
                             destoryBreaker_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.breaker = iprot.readI64();
                    struct.setBreakerIsSet(true);
                }
            }
        }

    }

    public static class destoryBreaker_result implements
                                              org.apache.thrift.TBase<destoryBreaker_result, destoryBreaker_result._Fields>,
                                              java.io.Serializable, Cloneable, Comparable<destoryBreaker_result> {
        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        private static final org.apache.thrift.protocol.TStruct                     STRUCT_DESC   = new org.apache.thrift.protocol.TStruct(
            "destoryBreaker_result");
        private static final org.apache.thrift.protocol.TField                      SE_FIELD_DESC = new org.apache.thrift.protocol.TField(
            "se", org.apache.thrift.protocol.TType.STRUCT, (short) 1);
        private static final Map<Class<? extends IScheme>, SchemeFactory>           schemes       = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new destoryBreaker_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new destoryBreaker_resultTupleSchemeFactory());
        }

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
                _Fields.class);
            tmpMap.put(_Fields.SE,
                new org.apache.thrift.meta_data.FieldMetaData("se", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(destoryBreaker_result.class, metaDataMap);
        }

        public ServiceError se; // required

        public destoryBreaker_result() {
        }

        public destoryBreaker_result(ServiceError se) {
            this();
            this.se = se;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public destoryBreaker_result(destoryBreaker_result other) {
            if (other.isSetSe()) {
                this.se = new ServiceError(other.se);
            }
        }

        public destoryBreaker_result deepCopy() {
            return new destoryBreaker_result(this);
        }

        public void clear() {
            this.se = null;
        }

        public ServiceError getSe() {
            return this.se;
        }

        public destoryBreaker_result setSe(ServiceError se) {
            this.se = se;
            return this;
        }

        public void unsetSe() {
            this.se = null;
        }

        /** Returns true if field se is set (has been assigned a value) and false otherwise */
        public boolean isSetSe() {
            return this.se != null;
        }

        public void setSeIsSet(boolean value) {
            if (!value) {
                this.se = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case SE:
                    if (value == null) {
                        unsetSe();
                    } else {
                        setSe((ServiceError) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case SE:
                    return getSe();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case SE:
                    return isSetSe();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof destoryBreaker_result)
                return this.equals((destoryBreaker_result) that);
            return false;
        }

        public boolean equals(destoryBreaker_result that) {
            if (that == null)
                return false;

            boolean this_present_se = true && this.isSetSe();
            boolean that_present_se = true && that.isSetSe();
            if (this_present_se || that_present_se) {
                if (!(this_present_se && that_present_se))
                    return false;
                if (!this.se.equals(that.se))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_se = true && (isSetSe());
            list.add(present_se);
            if (present_se)
                list.add(se);

            return list.hashCode();
        }

        public int compareTo(destoryBreaker_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetSe()).compareTo(other.isSetSe());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSe()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.se, other.se);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("destoryBreaker_result(");
            boolean first = true;

            sb.append("se:");
            if (this.se == null) {
                sb.append("null");
            } else {
                sb.append(this.se);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
                                                                       SE((short) 1, "se");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            private final short  _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // SE
                        return SE;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        private static class destoryBreaker_resultStandardSchemeFactory implements SchemeFactory {
            public destoryBreaker_resultStandardScheme getScheme() {
                return new destoryBreaker_resultStandardScheme();
            }
        }

        private static class destoryBreaker_resultStandardScheme extends StandardScheme<destoryBreaker_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot,
                             destoryBreaker_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // SE
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.se = new ServiceError();
                                struct.se.read(iprot);
                                struct.setSeIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot,
                              destoryBreaker_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.se != null) {
                    oprot.writeFieldBegin(SE_FIELD_DESC);
                    struct.se.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class destoryBreaker_resultTupleSchemeFactory implements SchemeFactory {
            public destoryBreaker_resultTupleScheme getScheme() {
                return new destoryBreaker_resultTupleScheme();
            }
        }

        private static class destoryBreaker_resultTupleScheme extends TupleScheme<destoryBreaker_result> {

            public void write(org.apache.thrift.protocol.TProtocol prot,
                              destoryBreaker_result struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSe()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSe()) {
                    struct.se.write(oprot);
                }
            }

            public void read(org.apache.thrift.protocol.TProtocol prot,
                             destoryBreaker_result struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.se = new ServiceError();
                    struct.se.read(iprot);
                    struct.setSeIsSet(true);
                }
            }
        }

    }

}
