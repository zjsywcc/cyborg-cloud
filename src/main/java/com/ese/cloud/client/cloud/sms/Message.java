/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ese.cloud.client.cloud.sms;

import java.util.*;

import javax.annotation.Generated;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

@SuppressWarnings({ "cast", "rawtypes", "serial", "unchecked" })
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-06-01")
public class Message implements org.apache.thrift.TBase<Message, Message._Fields>, java.io.Serializable, Cloneable,
                     Comparable<Message> {
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    private static final org.apache.thrift.protocol.TStruct                     STRUCT_DESC             = new org.apache.thrift.protocol.TStruct(
        "Message");
    private static final org.apache.thrift.protocol.TField                      BUSINESS_ID_FIELD_DESC  = new org.apache.thrift.protocol.TField(
        "businessId", org.apache.thrift.protocol.TType.I32, (short) 1);
    private static final org.apache.thrift.protocol.TField                      PHONES_FIELD_DESC       = new org.apache.thrift.protocol.TField(
        "phones", org.apache.thrift.protocol.TType.LIST, (short) 2);
    private static final org.apache.thrift.protocol.TField                      MESSAGE_FIELD_DESC      = new org.apache.thrift.protocol.TField(
        "message", org.apache.thrift.protocol.TType.STRING, (short) 3);
    private static final org.apache.thrift.protocol.TField                      SEND_TIME_FIELD_DESC    = new org.apache.thrift.protocol.TField(
        "sendTime", org.apache.thrift.protocol.TType.I32, (short) 4);
    private static final org.apache.thrift.protocol.TField                      EXPIRED_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "expiredTime", org.apache.thrift.protocol.TType.I32, (short) 5);
    private static final org.apache.thrift.protocol.TField                      PRIORITY_FIELD_DESC     = new org.apache.thrift.protocol.TField(
        "priority", org.apache.thrift.protocol.TType.I32, (short) 6);
    private static final org.apache.thrift.protocol.TField                      JOB_ID_FIELD_DESC       = new org.apache.thrift.protocol.TField(
        "jobId", org.apache.thrift.protocol.TType.I32, (short) 7);
    private static final org.apache.thrift.protocol.TField                      CHANNEL_FIELD_DESC      = new org.apache.thrift.protocol.TField(
        "channel", org.apache.thrift.protocol.TType.I32, (short) 8);
    private static final org.apache.thrift.protocol.TField                      SIGNATURE_FIELD_DESC    = new org.apache.thrift.protocol.TField(
        "signature", org.apache.thrift.protocol.TType.STRING, (short) 9);
    private static final org.apache.thrift.protocol.TField                      COUNTRY_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "countryCode", org.apache.thrift.protocol.TType.STRING, (short) 10);
    private static final Map<Class<? extends IScheme>, SchemeFactory>           schemes                 = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    // isset id assignments
    private static final int                                                    __BUSINESSID_ISSET_ID   = 0;
    private static final int                                                    __SENDTIME_ISSET_ID     = 1;
    private static final int                                                    __EXPIREDTIME_ISSET_ID  = 2;
    private static final int                                                    __PRIORITY_ISSET_ID     = 3;
    private static final int                                                    __JOBID_ISSET_ID        = 4;
    private static final int                                                    __CHANNEL_ISSET_ID      = 5;
    private static final _Fields                                                optionals[]             = { _Fields.SEND_TIME,
                                                                                                            _Fields.EXPIRED_TIME,
                                                                                                            _Fields.PRIORITY,
                                                                                                            _Fields.JOB_ID,
                                                                                                            _Fields.CHANNEL,
                                                                                                            _Fields.SIGNATURE,
                                                                                                            _Fields.COUNTRY_CODE };

    static {
        schemes.put(StandardScheme.class, new MessageStandardSchemeFactory());
        schemes.put(TupleScheme.class, new MessageTupleSchemeFactory());
    }

    static {
        Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
            _Fields.class);
        tmpMap.put(_Fields.BUSINESS_ID,
            new org.apache.thrift.meta_data.FieldMetaData("businessId",
                org.apache.thrift.TFieldRequirementType.REQUIRED,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        tmpMap.put(_Fields.PHONES,
            new org.apache.thrift.meta_data.FieldMetaData("phones", org.apache.thrift.TFieldRequirementType.REQUIRED,
                new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
        tmpMap.put(_Fields.MESSAGE,
            new org.apache.thrift.meta_data.FieldMetaData("message", org.apache.thrift.TFieldRequirementType.REQUIRED,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.SEND_TIME,
            new org.apache.thrift.meta_data.FieldMetaData("sendTime", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        tmpMap.put(_Fields.EXPIRED_TIME,
            new org.apache.thrift.meta_data.FieldMetaData("expiredTime",
                org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        tmpMap.put(_Fields.PRIORITY,
            new org.apache.thrift.meta_data.FieldMetaData("priority", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        tmpMap.put(_Fields.JOB_ID,
            new org.apache.thrift.meta_data.FieldMetaData("jobId", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        tmpMap.put(_Fields.CHANNEL,
            new org.apache.thrift.meta_data.FieldMetaData("channel", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        tmpMap.put(_Fields.SIGNATURE,
            new org.apache.thrift.meta_data.FieldMetaData("signature", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.COUNTRY_CODE,
            new org.apache.thrift.meta_data.FieldMetaData("countryCode",
                org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        metaDataMap = Collections.unmodifiableMap(tmpMap);
        org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Message.class, metaDataMap);
    }

    public int        businessId;          // required
    public List<Long> phones;              // required
    public String     message;             // required
    public int        sendTime;            // optional
    public int        expiredTime;         // optional
    public int        priority;            // optional
    public int        jobId;               // optional
    public int        channel;             // optional
    public String     signature;           // optional
    public String     countryCode;         // optional
    private byte      __isset_bitfield = 0;

    public Message() {
        this.sendTime = 0;

        this.expiredTime = 0;

        this.priority = 0;

        this.jobId = 0;

        this.channel = 0;

        this.signature = "";

        this.countryCode = "";

    }

    public Message(int businessId, List<Long> phones, String message) {
        this();
        this.businessId = businessId;
        setBusinessIdIsSet(true);
        this.phones = phones;
        this.message = message;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Message(Message other) {
        __isset_bitfield = other.__isset_bitfield;
        this.businessId = other.businessId;
        if (other.isSetPhones()) {
            List<Long> __this__phones = new ArrayList<Long>(other.phones);
            this.phones = __this__phones;
        }
        if (other.isSetMessage()) {
            this.message = other.message;
        }
        this.sendTime = other.sendTime;
        this.expiredTime = other.expiredTime;
        this.priority = other.priority;
        this.jobId = other.jobId;
        this.channel = other.channel;
        if (other.isSetSignature()) {
            this.signature = other.signature;
        }
        if (other.isSetCountryCode()) {
            this.countryCode = other.countryCode;
        }
    }

    public Message deepCopy() {
        return new Message(this);
    }

    public void clear() {
        setBusinessIdIsSet(false);
        this.businessId = 0;
        this.phones = null;
        this.message = null;
        this.sendTime = 0;

        this.expiredTime = 0;

        this.priority = 0;

        this.jobId = 0;

        this.channel = 0;

        this.signature = "";

        this.countryCode = "";

    }

    public int getBusinessId() {
        return this.businessId;
    }

    public Message setBusinessId(int businessId) {
        this.businessId = businessId;
        setBusinessIdIsSet(true);
        return this;
    }

    public void unsetBusinessId() {
        __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BUSINESSID_ISSET_ID);
    }

    /** Returns true if field businessId is set (has been assigned a value) and false otherwise */
    public boolean isSetBusinessId() {
        return EncodingUtils.testBit(__isset_bitfield, __BUSINESSID_ISSET_ID);
    }

    public void setBusinessIdIsSet(boolean value) {
        __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BUSINESSID_ISSET_ID, value);
    }

    public int getPhonesSize() {
        return (this.phones == null) ? 0 : this.phones.size();
    }

    public Iterator<Long> getPhonesIterator() {
        return (this.phones == null) ? null : this.phones.iterator();
    }

    public void addToPhones(long elem) {
        if (this.phones == null) {
            this.phones = new ArrayList<Long>();
        }
        this.phones.add(elem);
    }

    public List<Long> getPhones() {
        return this.phones;
    }

    public Message setPhones(List<Long> phones) {
        this.phones = phones;
        return this;
    }

    public void unsetPhones() {
        this.phones = null;
    }

    /** Returns true if field phones is set (has been assigned a value) and false otherwise */
    public boolean isSetPhones() {
        return this.phones != null;
    }

    public void setPhonesIsSet(boolean value) {
        if (!value) {
            this.phones = null;
        }
    }

    public String getMessage() {
        return this.message;
    }

    public Message setMessage(String message) {
        this.message = message;
        return this;
    }

    public void unsetMessage() {
        this.message = null;
    }

    /** Returns true if field message is set (has been assigned a value) and false otherwise */
    public boolean isSetMessage() {
        return this.message != null;
    }

    public void setMessageIsSet(boolean value) {
        if (!value) {
            this.message = null;
        }
    }

    public int getSendTime() {
        return this.sendTime;
    }

    public Message setSendTime(int sendTime) {
        this.sendTime = sendTime;
        setSendTimeIsSet(true);
        return this;
    }

    public void unsetSendTime() {
        __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SENDTIME_ISSET_ID);
    }

    /** Returns true if field sendTime is set (has been assigned a value) and false otherwise */
    public boolean isSetSendTime() {
        return EncodingUtils.testBit(__isset_bitfield, __SENDTIME_ISSET_ID);
    }

    public void setSendTimeIsSet(boolean value) {
        __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SENDTIME_ISSET_ID, value);
    }

    public int getExpiredTime() {
        return this.expiredTime;
    }

    public Message setExpiredTime(int expiredTime) {
        this.expiredTime = expiredTime;
        setExpiredTimeIsSet(true);
        return this;
    }

    public void unsetExpiredTime() {
        __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXPIREDTIME_ISSET_ID);
    }

    /** Returns true if field expiredTime is set (has been assigned a value) and false otherwise */
    public boolean isSetExpiredTime() {
        return EncodingUtils.testBit(__isset_bitfield, __EXPIREDTIME_ISSET_ID);
    }

    public void setExpiredTimeIsSet(boolean value) {
        __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXPIREDTIME_ISSET_ID, value);
    }

    public int getPriority() {
        return this.priority;
    }

    public Message setPriority(int priority) {
        this.priority = priority;
        setPriorityIsSet(true);
        return this;
    }

    public void unsetPriority() {
        __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRIORITY_ISSET_ID);
    }

    /** Returns true if field priority is set (has been assigned a value) and false otherwise */
    public boolean isSetPriority() {
        return EncodingUtils.testBit(__isset_bitfield, __PRIORITY_ISSET_ID);
    }

    public void setPriorityIsSet(boolean value) {
        __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRIORITY_ISSET_ID, value);
    }

    public int getJobId() {
        return this.jobId;
    }

    public Message setJobId(int jobId) {
        this.jobId = jobId;
        setJobIdIsSet(true);
        return this;
    }

    public void unsetJobId() {
        __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __JOBID_ISSET_ID);
    }

    /** Returns true if field jobId is set (has been assigned a value) and false otherwise */
    public boolean isSetJobId() {
        return EncodingUtils.testBit(__isset_bitfield, __JOBID_ISSET_ID);
    }

    public void setJobIdIsSet(boolean value) {
        __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __JOBID_ISSET_ID, value);
    }

    public int getChannel() {
        return this.channel;
    }

    public Message setChannel(int channel) {
        this.channel = channel;
        setChannelIsSet(true);
        return this;
    }

    public void unsetChannel() {
        __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CHANNEL_ISSET_ID);
    }

    /** Returns true if field channel is set (has been assigned a value) and false otherwise */
    public boolean isSetChannel() {
        return EncodingUtils.testBit(__isset_bitfield, __CHANNEL_ISSET_ID);
    }

    public void setChannelIsSet(boolean value) {
        __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CHANNEL_ISSET_ID, value);
    }

    public String getSignature() {
        return this.signature;
    }

    public Message setSignature(String signature) {
        this.signature = signature;
        return this;
    }

    public void unsetSignature() {
        this.signature = null;
    }

    /** Returns true if field signature is set (has been assigned a value) and false otherwise */
    public boolean isSetSignature() {
        return this.signature != null;
    }

    public void setSignatureIsSet(boolean value) {
        if (!value) {
            this.signature = null;
        }
    }

    public String getCountryCode() {
        return this.countryCode;
    }

    public Message setCountryCode(String countryCode) {
        this.countryCode = countryCode;
        return this;
    }

    public void unsetCountryCode() {
        this.countryCode = null;
    }

    /** Returns true if field countryCode is set (has been assigned a value) and false otherwise */
    public boolean isSetCountryCode() {
        return this.countryCode != null;
    }

    public void setCountryCodeIsSet(boolean value) {
        if (!value) {
            this.countryCode = null;
        }
    }

    public void setFieldValue(_Fields field, Object value) {
        switch (field) {
            case BUSINESS_ID:
                if (value == null) {
                    unsetBusinessId();
                } else {
                    setBusinessId((Integer) value);
                }
                break;

            case PHONES:
                if (value == null) {
                    unsetPhones();
                } else {
                    setPhones((List<Long>) value);
                }
                break;

            case MESSAGE:
                if (value == null) {
                    unsetMessage();
                } else {
                    setMessage((String) value);
                }
                break;

            case SEND_TIME:
                if (value == null) {
                    unsetSendTime();
                } else {
                    setSendTime((Integer) value);
                }
                break;

            case EXPIRED_TIME:
                if (value == null) {
                    unsetExpiredTime();
                } else {
                    setExpiredTime((Integer) value);
                }
                break;

            case PRIORITY:
                if (value == null) {
                    unsetPriority();
                } else {
                    setPriority((Integer) value);
                }
                break;

            case JOB_ID:
                if (value == null) {
                    unsetJobId();
                } else {
                    setJobId((Integer) value);
                }
                break;

            case CHANNEL:
                if (value == null) {
                    unsetChannel();
                } else {
                    setChannel((Integer) value);
                }
                break;

            case SIGNATURE:
                if (value == null) {
                    unsetSignature();
                } else {
                    setSignature((String) value);
                }
                break;

            case COUNTRY_CODE:
                if (value == null) {
                    unsetCountryCode();
                } else {
                    setCountryCode((String) value);
                }
                break;

        }
    }

    public Object getFieldValue(_Fields field) {
        switch (field) {
            case BUSINESS_ID:
                return getBusinessId();

            case PHONES:
                return getPhones();

            case MESSAGE:
                return getMessage();

            case SEND_TIME:
                return getSendTime();

            case EXPIRED_TIME:
                return getExpiredTime();

            case PRIORITY:
                return getPriority();

            case JOB_ID:
                return getJobId();

            case CHANNEL:
                return getChannel();

            case SIGNATURE:
                return getSignature();

            case COUNTRY_CODE:
                return getCountryCode();

        }
        throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
        if (field == null) {
            throw new IllegalArgumentException();
        }

        switch (field) {
            case BUSINESS_ID:
                return isSetBusinessId();
            case PHONES:
                return isSetPhones();
            case MESSAGE:
                return isSetMessage();
            case SEND_TIME:
                return isSetSendTime();
            case EXPIRED_TIME:
                return isSetExpiredTime();
            case PRIORITY:
                return isSetPriority();
            case JOB_ID:
                return isSetJobId();
            case CHANNEL:
                return isSetChannel();
            case SIGNATURE:
                return isSetSignature();
            case COUNTRY_CODE:
                return isSetCountryCode();
        }
        throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
        if (that == null)
            return false;
        if (that instanceof Message)
            return this.equals((Message) that);
        return false;
    }

    public boolean equals(Message that) {
        if (that == null)
            return false;

        boolean this_present_businessId = true;
        boolean that_present_businessId = true;
        if (this_present_businessId || that_present_businessId) {
            if (!(this_present_businessId && that_present_businessId))
                return false;
            if (this.businessId != that.businessId)
                return false;
        }

        boolean this_present_phones = true && this.isSetPhones();
        boolean that_present_phones = true && that.isSetPhones();
        if (this_present_phones || that_present_phones) {
            if (!(this_present_phones && that_present_phones))
                return false;
            if (!this.phones.equals(that.phones))
                return false;
        }

        boolean this_present_message = true && this.isSetMessage();
        boolean that_present_message = true && that.isSetMessage();
        if (this_present_message || that_present_message) {
            if (!(this_present_message && that_present_message))
                return false;
            if (!this.message.equals(that.message))
                return false;
        }

        boolean this_present_sendTime = true && this.isSetSendTime();
        boolean that_present_sendTime = true && that.isSetSendTime();
        if (this_present_sendTime || that_present_sendTime) {
            if (!(this_present_sendTime && that_present_sendTime))
                return false;
            if (this.sendTime != that.sendTime)
                return false;
        }

        boolean this_present_expiredTime = true && this.isSetExpiredTime();
        boolean that_present_expiredTime = true && that.isSetExpiredTime();
        if (this_present_expiredTime || that_present_expiredTime) {
            if (!(this_present_expiredTime && that_present_expiredTime))
                return false;
            if (this.expiredTime != that.expiredTime)
                return false;
        }

        boolean this_present_priority = true && this.isSetPriority();
        boolean that_present_priority = true && that.isSetPriority();
        if (this_present_priority || that_present_priority) {
            if (!(this_present_priority && that_present_priority))
                return false;
            if (this.priority != that.priority)
                return false;
        }

        boolean this_present_jobId = true && this.isSetJobId();
        boolean that_present_jobId = true && that.isSetJobId();
        if (this_present_jobId || that_present_jobId) {
            if (!(this_present_jobId && that_present_jobId))
                return false;
            if (this.jobId != that.jobId)
                return false;
        }

        boolean this_present_channel = true && this.isSetChannel();
        boolean that_present_channel = true && that.isSetChannel();
        if (this_present_channel || that_present_channel) {
            if (!(this_present_channel && that_present_channel))
                return false;
            if (this.channel != that.channel)
                return false;
        }

        boolean this_present_signature = true && this.isSetSignature();
        boolean that_present_signature = true && that.isSetSignature();
        if (this_present_signature || that_present_signature) {
            if (!(this_present_signature && that_present_signature))
                return false;
            if (!this.signature.equals(that.signature))
                return false;
        }

        boolean this_present_countryCode = true && this.isSetCountryCode();
        boolean that_present_countryCode = true && that.isSetCountryCode();
        if (this_present_countryCode || that_present_countryCode) {
            if (!(this_present_countryCode && that_present_countryCode))
                return false;
            if (!this.countryCode.equals(that.countryCode))
                return false;
        }

        return true;
    }

    @Override
    public int hashCode() {
        List<Object> list = new ArrayList<Object>();

        boolean present_businessId = true;
        list.add(present_businessId);
        if (present_businessId)
            list.add(businessId);

        boolean present_phones = true && (isSetPhones());
        list.add(present_phones);
        if (present_phones)
            list.add(phones);

        boolean present_message = true && (isSetMessage());
        list.add(present_message);
        if (present_message)
            list.add(message);

        boolean present_sendTime = true && (isSetSendTime());
        list.add(present_sendTime);
        if (present_sendTime)
            list.add(sendTime);

        boolean present_expiredTime = true && (isSetExpiredTime());
        list.add(present_expiredTime);
        if (present_expiredTime)
            list.add(expiredTime);

        boolean present_priority = true && (isSetPriority());
        list.add(present_priority);
        if (present_priority)
            list.add(priority);

        boolean present_jobId = true && (isSetJobId());
        list.add(present_jobId);
        if (present_jobId)
            list.add(jobId);

        boolean present_channel = true && (isSetChannel());
        list.add(present_channel);
        if (present_channel)
            list.add(channel);

        boolean present_signature = true && (isSetSignature());
        list.add(present_signature);
        if (present_signature)
            list.add(signature);

        boolean present_countryCode = true && (isSetCountryCode());
        list.add(present_countryCode);
        if (present_countryCode)
            list.add(countryCode);

        return list.hashCode();
    }

    public int compareTo(Message other) {
        if (!getClass().equals(other.getClass())) {
            return getClass().getName().compareTo(other.getClass().getName());
        }

        int lastComparison = 0;

        lastComparison = Boolean.valueOf(isSetBusinessId()).compareTo(other.isSetBusinessId());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetBusinessId()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessId, other.businessId);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetPhones()).compareTo(other.isSetPhones());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetPhones()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.phones, other.phones);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetMessage()).compareTo(other.isSetMessage());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetMessage()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.message, other.message);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetSendTime()).compareTo(other.isSetSendTime());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetSendTime()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sendTime, other.sendTime);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetExpiredTime()).compareTo(other.isSetExpiredTime());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetExpiredTime()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.expiredTime, other.expiredTime);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetPriority()).compareTo(other.isSetPriority());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetPriority()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.priority, other.priority);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetJobId()).compareTo(other.isSetJobId());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetJobId()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobId, other.jobId);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetChannel()).compareTo(other.isSetChannel());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetChannel()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channel, other.channel);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetSignature()).compareTo(other.isSetSignature());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetSignature()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.signature, other.signature);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetCountryCode()).compareTo(other.isSetCountryCode());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetCountryCode()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.countryCode, other.countryCode);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        return 0;
    }

    public _Fields fieldForId(int fieldId) {
        return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
        schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
        schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("Message(");
        boolean first = true;

        sb.append("businessId:");
        sb.append(this.businessId);
        first = false;
        if (!first)
            sb.append(", ");
        sb.append("phones:");
        if (this.phones == null) {
            sb.append("null");
        } else {
            sb.append(this.phones);
        }
        first = false;
        if (!first)
            sb.append(", ");
        sb.append("message:");
        if (this.message == null) {
            sb.append("null");
        } else {
            sb.append(this.message);
        }
        first = false;
        if (isSetSendTime()) {
            if (!first)
                sb.append(", ");
            sb.append("sendTime:");
            sb.append(this.sendTime);
            first = false;
        }
        if (isSetExpiredTime()) {
            if (!first)
                sb.append(", ");
            sb.append("expiredTime:");
            sb.append(this.expiredTime);
            first = false;
        }
        if (isSetPriority()) {
            if (!first)
                sb.append(", ");
            sb.append("priority:");
            sb.append(this.priority);
            first = false;
        }
        if (isSetJobId()) {
            if (!first)
                sb.append(", ");
            sb.append("jobId:");
            sb.append(this.jobId);
            first = false;
        }
        if (isSetChannel()) {
            if (!first)
                sb.append(", ");
            sb.append("channel:");
            sb.append(this.channel);
            first = false;
        }
        if (isSetSignature()) {
            if (!first)
                sb.append(", ");
            sb.append("signature:");
            if (this.signature == null) {
                sb.append("null");
            } else {
                sb.append(this.signature);
            }
            first = false;
        }
        if (isSetCountryCode()) {
            if (!first)
                sb.append(", ");
            sb.append("countryCode:");
            if (this.countryCode == null) {
                sb.append("null");
            } else {
                sb.append(this.countryCode);
            }
            first = false;
        }
        sb.append(")");
        return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
        // check for required fields
        // alas, we cannot check 'businessId' because it's a primitive and you chose the non-beans generator.
        if (phones == null) {
            throw new org.apache.thrift.protocol.TProtocolException(
                "Required field 'phones' was not present! Struct: " + toString());
        }
        if (message == null) {
            throw new org.apache.thrift.protocol.TProtocolException(
                "Required field 'message' was not present! Struct: " + toString());
        }
        // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
        try {
            write(new org.apache.thrift.protocol.TCompactProtocol(
                new org.apache.thrift.transport.TIOStreamTransport(out)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
        try {
            // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
            __isset_bitfield = 0;
            read(new org.apache.thrift.protocol.TCompactProtocol(
                new org.apache.thrift.transport.TIOStreamTransport(in)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
                                                                   BUSINESS_ID((short) 1,
                                                                               "businessId"), PHONES((short) 2,
                                                                                                     "phones"), MESSAGE((short) 3,
                                                                                                                        "message"), SEND_TIME((short) 4,
                                                                                                                                              "sendTime"), EXPIRED_TIME((short) 5,
                                                                                                                                                                        "expiredTime"), PRIORITY((short) 6,
                                                                                                                                                                                                 "priority"), JOB_ID((short) 7,
                                                                                                                                                                                                                     "jobId"), CHANNEL((short) 8,
                                                                                                                                                                                                                                       "channel"), SIGNATURE((short) 9,
                                                                                                                                                                                                                                                             "signature"), COUNTRY_CODE((short) 10,
                                                                                                                                                                                                                                                                                        "countryCode");

        private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

        static {
            for (_Fields field : EnumSet.allOf(_Fields.class)) {
                byName.put(field.getFieldName(), field);
            }
        }

        private final short  _thriftId;
        private final String _fieldName;

        _Fields(short thriftId, String fieldName) {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }

        /**
         * Find the _Fields constant that matches fieldId, or null if its not found.
         */
        public static _Fields findByThriftId(int fieldId) {
            switch (fieldId) {
                case 1: // BUSINESS_ID
                    return BUSINESS_ID;
                case 2: // PHONES
                    return PHONES;
                case 3: // MESSAGE
                    return MESSAGE;
                case 4: // SEND_TIME
                    return SEND_TIME;
                case 5: // EXPIRED_TIME
                    return EXPIRED_TIME;
                case 6: // PRIORITY
                    return PRIORITY;
                case 7: // JOB_ID
                    return JOB_ID;
                case 8: // CHANNEL
                    return CHANNEL;
                case 9: // SIGNATURE
                    return SIGNATURE;
                case 10: // COUNTRY_CODE
                    return COUNTRY_CODE;
                default:
                    return null;
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, throwing an exception
         * if it is not found.
         */
        public static _Fields findByThriftIdOrThrow(int fieldId) {
            _Fields fields = findByThriftId(fieldId);
            if (fields == null)
                throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
            return fields;
        }

        /**
         * Find the _Fields constant that matches name, or null if its not found.
         */
        public static _Fields findByName(String name) {
            return byName.get(name);
        }

        public short getThriftFieldId() {
            return _thriftId;
        }

        public String getFieldName() {
            return _fieldName;
        }
    }

    private static class MessageStandardSchemeFactory implements SchemeFactory {
        public MessageStandardScheme getScheme() {
            return new MessageStandardScheme();
        }
    }

    private static class MessageStandardScheme extends StandardScheme<Message> {

        public void read(org.apache.thrift.protocol.TProtocol iprot,
                         Message struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TField schemeField;
            iprot.readStructBegin();
            while (true) {
                schemeField = iprot.readFieldBegin();
                if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                    break;
                }
                switch (schemeField.id) {
                    case 1: // BUSINESS_ID
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.businessId = iprot.readI32();
                            struct.setBusinessIdIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 2: // PHONES
                        if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                            {
                                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                                struct.phones = new ArrayList<Long>(_list0.size);
                                long _elem1;
                                for (int _i2 = 0; _i2 < _list0.size; ++_i2) {
                                    _elem1 = iprot.readI64();
                                    struct.phones.add(_elem1);
                                }
                                iprot.readListEnd();
                            }
                            struct.setPhonesIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 3: // MESSAGE
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.message = iprot.readString();
                            struct.setMessageIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 4: // SEND_TIME
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.sendTime = iprot.readI32();
                            struct.setSendTimeIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 5: // EXPIRED_TIME
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.expiredTime = iprot.readI32();
                            struct.setExpiredTimeIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 6: // PRIORITY
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.priority = iprot.readI32();
                            struct.setPriorityIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 7: // JOB_ID
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.jobId = iprot.readI32();
                            struct.setJobIdIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 8: // CHANNEL
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.channel = iprot.readI32();
                            struct.setChannelIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 9: // SIGNATURE
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.signature = iprot.readString();
                            struct.setSignatureIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 10: // COUNTRY_CODE
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.countryCode = iprot.readString();
                            struct.setCountryCodeIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be checked in the validate method
            if (!struct.isSetBusinessId()) {
                throw new org.apache.thrift.protocol.TProtocolException(
                    "Required field 'businessId' was not found in serialized data! Struct: " + toString());
            }
            struct.validate();
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot,
                          Message struct) throws org.apache.thrift.TException {
            struct.validate();

            oprot.writeStructBegin(STRUCT_DESC);
            oprot.writeFieldBegin(BUSINESS_ID_FIELD_DESC);
            oprot.writeI32(struct.businessId);
            oprot.writeFieldEnd();
            if (struct.phones != null) {
                oprot.writeFieldBegin(PHONES_FIELD_DESC);
                {
                    oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64,
                        struct.phones.size()));
                    for (long _iter3 : struct.phones) {
                        oprot.writeI64(_iter3);
                    }
                    oprot.writeListEnd();
                }
                oprot.writeFieldEnd();
            }
            if (struct.message != null) {
                oprot.writeFieldBegin(MESSAGE_FIELD_DESC);
                oprot.writeString(struct.message);
                oprot.writeFieldEnd();
            }
            if (struct.isSetSendTime()) {
                oprot.writeFieldBegin(SEND_TIME_FIELD_DESC);
                oprot.writeI32(struct.sendTime);
                oprot.writeFieldEnd();
            }
            if (struct.isSetExpiredTime()) {
                oprot.writeFieldBegin(EXPIRED_TIME_FIELD_DESC);
                oprot.writeI32(struct.expiredTime);
                oprot.writeFieldEnd();
            }
            if (struct.isSetPriority()) {
                oprot.writeFieldBegin(PRIORITY_FIELD_DESC);
                oprot.writeI32(struct.priority);
                oprot.writeFieldEnd();
            }
            if (struct.isSetJobId()) {
                oprot.writeFieldBegin(JOB_ID_FIELD_DESC);
                oprot.writeI32(struct.jobId);
                oprot.writeFieldEnd();
            }
            if (struct.isSetChannel()) {
                oprot.writeFieldBegin(CHANNEL_FIELD_DESC);
                oprot.writeI32(struct.channel);
                oprot.writeFieldEnd();
            }
            if (struct.signature != null) {
                if (struct.isSetSignature()) {
                    oprot.writeFieldBegin(SIGNATURE_FIELD_DESC);
                    oprot.writeString(struct.signature);
                    oprot.writeFieldEnd();
                }
            }
            if (struct.countryCode != null) {
                if (struct.isSetCountryCode()) {
                    oprot.writeFieldBegin(COUNTRY_CODE_FIELD_DESC);
                    oprot.writeString(struct.countryCode);
                    oprot.writeFieldEnd();
                }
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

    }

    private static class MessageTupleSchemeFactory implements SchemeFactory {
        public MessageTupleScheme getScheme() {
            return new MessageTupleScheme();
        }
    }

    private static class MessageTupleScheme extends TupleScheme<Message> {

        public void write(org.apache.thrift.protocol.TProtocol prot,
                          Message struct) throws org.apache.thrift.TException {
            TTupleProtocol oprot = (TTupleProtocol) prot;
            oprot.writeI32(struct.businessId);
            {
                oprot.writeI32(struct.phones.size());
                for (long _iter4 : struct.phones) {
                    oprot.writeI64(_iter4);
                }
            }
            oprot.writeString(struct.message);
            BitSet optionals = new BitSet();
            if (struct.isSetSendTime()) {
                optionals.set(0);
            }
            if (struct.isSetExpiredTime()) {
                optionals.set(1);
            }
            if (struct.isSetPriority()) {
                optionals.set(2);
            }
            if (struct.isSetJobId()) {
                optionals.set(3);
            }
            if (struct.isSetChannel()) {
                optionals.set(4);
            }
            if (struct.isSetSignature()) {
                optionals.set(5);
            }
            if (struct.isSetCountryCode()) {
                optionals.set(6);
            }
            oprot.writeBitSet(optionals, 7);
            if (struct.isSetSendTime()) {
                oprot.writeI32(struct.sendTime);
            }
            if (struct.isSetExpiredTime()) {
                oprot.writeI32(struct.expiredTime);
            }
            if (struct.isSetPriority()) {
                oprot.writeI32(struct.priority);
            }
            if (struct.isSetJobId()) {
                oprot.writeI32(struct.jobId);
            }
            if (struct.isSetChannel()) {
                oprot.writeI32(struct.channel);
            }
            if (struct.isSetSignature()) {
                oprot.writeString(struct.signature);
            }
            if (struct.isSetCountryCode()) {
                oprot.writeString(struct.countryCode);
            }
        }

        public void read(org.apache.thrift.protocol.TProtocol prot,
                         Message struct) throws org.apache.thrift.TException {
            TTupleProtocol iprot = (TTupleProtocol) prot;
            struct.businessId = iprot.readI32();
            struct.setBusinessIdIsSet(true);
            {
                org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(
                    org.apache.thrift.protocol.TType.I64, iprot.readI32());
                struct.phones = new ArrayList<Long>(_list5.size);
                long _elem6;
                for (int _i7 = 0; _i7 < _list5.size; ++_i7) {
                    _elem6 = iprot.readI64();
                    struct.phones.add(_elem6);
                }
            }
            struct.setPhonesIsSet(true);
            struct.message = iprot.readString();
            struct.setMessageIsSet(true);
            BitSet incoming = iprot.readBitSet(7);
            if (incoming.get(0)) {
                struct.sendTime = iprot.readI32();
                struct.setSendTimeIsSet(true);
            }
            if (incoming.get(1)) {
                struct.expiredTime = iprot.readI32();
                struct.setExpiredTimeIsSet(true);
            }
            if (incoming.get(2)) {
                struct.priority = iprot.readI32();
                struct.setPriorityIsSet(true);
            }
            if (incoming.get(3)) {
                struct.jobId = iprot.readI32();
                struct.setJobIdIsSet(true);
            }
            if (incoming.get(4)) {
                struct.channel = iprot.readI32();
                struct.setChannelIsSet(true);
            }
            if (incoming.get(5)) {
                struct.signature = iprot.readString();
                struct.setSignatureIsSet(true);
            }
            if (incoming.get(6)) {
                struct.countryCode = iprot.readString();
                struct.setCountryCodeIsSet(true);
            }
        }
    }

}
